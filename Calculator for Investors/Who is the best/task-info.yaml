type: edu
custom_name: Who is the best?
files:
  - name: main.py
    visible: true
    text: |
      # write your code here
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      import os
      import sqlite3
      
      from itertools import permutations
      
      from hstest import CheckResult, StageTest, dynamic_test, TestedProgram
      
      db_name = "investor.db"
      table_names = ["companies", "financial"]
      files_to_delete = ("investor.db",)
      
      main_menu = """
      MAIN MENU
      0 Exit
      1 CRUD operations
      2 Show top ten companies by criteria
      """
      
      top_ten_menu = """
      TOP TEN MENU
      0 Back
      1 List by ND/EBITDA
      2 List by ROE
      3 List by ROA
      """
      
      ebitda_msg = """TICKER ND/EBITDA
      DUK 6.4
      SO 6.02
      CHTR 4.55
      NEE 4.39
      TMUS 4.19
      DE 4.16
      T 3.94
      MCD 3.77
      VZ 3.57
      CAT 3.34"""
      
      roe_msg = """TICKER ROE
      AMGN 6.43
      AAPL 1.4
      MA 1.22
      UPS 0.84
      ABBV 0.7
      QCOM 0.68
      LMT 0.63
      ADP 0.62
      LLY 0.59
      TXN 0.55"""
      
      roa_msg = """TICKER ROA
      TXN 0.31
      AAPL 0.27
      FB 0.24
      MA 0.23
      HD 0.23
      AMAT 0.23
      NVDA 0.22
      PM 0.22
      GOOG 0.21
      QCOM 0.2"""
      
      welcome_msg = "Welcome to the Investor Program!"
      farewell_msg = "Have a nice day!"
      ask_option_msg = "Enter an option:"
      invalid_option_msg = "Invalid option!"
      
      # index 0 entered value, index 1 expected value
      test_data_1 = [
          {
              "test_values": [
                  ("2", (top_ten_menu + ask_option_msg)),
                  ("199", (invalid_option_msg + main_menu + ask_option_msg)),
                  ("2", (top_ten_menu + ask_option_msg)),
                  ("1", (ebitda_msg + main_menu + ask_option_msg)),
                  ("0", farewell_msg),
              ]
          },
          {
              "test_values": [
                  ("2", (top_ten_menu + ask_option_msg)),
                  ("2", (roe_msg + main_menu + ask_option_msg)),
                  ("0", farewell_msg),
              ]
          },
          {
              "test_values": [
                  ("2", (top_ten_menu + ask_option_msg)),
                  ("3", (roa_msg + main_menu + ask_option_msg)),
                  ("0", farewell_msg),
              ]
          },
      ]
      
      
      def delete_files(arr):
          for file_name in arr:
              try:
                  if os.path.exists(file_name):
                      os.remove(file_name)
              except PermissionError:
                  return
      
      
      def create_list_roa_ticker():
          list023 = [f"{x} {0.23}\n" for x in ["MA", "HD", "AMAT"]]
          list023 = ["".join(item) for item in permutations(list023)]
          list022 = [f"{x} {0.22}\n" for x in ["NVDA", "PM"]]
          list022 = ["".join(item) for item in permutations(list022)]
          return [
              f"TICKER ROA\nTXN 0.31\nAAPL 0.27\nFB 0.24\n{item023}{item022}\nGOOG 0.21\nQCOM 0.2\n"
              f"{main_menu + ask_option_msg}".replace("\n", '') for item023 in list023 for item022 in list022
          ]
      
      
      class InvestorTest(StageTest):
          def after_all_tests(self):
              delete_files(files_to_delete)
      
          # testing entered vs expected
          @dynamic_test(data=test_data_1)
          def test1(self, dict_):
              t = TestedProgram()
              output = t.start().strip()
              text = welcome_msg.strip() + "\n" + main_menu.strip() + "\n" + ask_option_msg.strip()
              if output.replace("\n", "") != text.replace("\n", ""):
                  # print(repr(output))
                  # print(repr(text))
                  return CheckResult.wrong(
                      f"Your program should output:\n{text}\ninstead of:\n{output}")
              for test_values in dict_.values():
                  for item in test_values:
                      output = t.execute(item[0]).strip()
                      text = item[1]
                      if roa_msg.lower() in text.lower():
                          correct = output.replace("\n", "") in create_list_roa_ticker()
                      else:
                          correct = output.replace("\n", "") == text.replace("\n", "")
                      if not correct:
                          # print(repr(output))
                          # print(repr(text))
                          return CheckResult.wrong(
                              f"Your program should output:\n{text}\ninstead of:\n{output}")
              return CheckResult.correct()
      
          # testing if database exists
          @dynamic_test()
          def test2(self):
              if not os.path.exists(db_name):
                  return CheckResult.wrong(
                      f"'{db_name}' does not exist!")
              return CheckResult.correct()
      
          # testing if tables exist
          @dynamic_test()
          def test3(self):
              conn = sqlite3.connect(db_name)
              cur = conn.cursor()
              for table in table_names:
                  query = f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}';"
                  cur.execute(query)
                  r = cur.fetchall()
                  if not r or r[0][0] != table:
                      conn.close()
                      return CheckResult.wrong(f"Table {table} not found!")
              conn.close()
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          InvestorTest().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import InvestorTest
      
      if __name__ == '__main__':    InvestorTest().run_tests()
    learner_created: false
  - name: constants.py
    visible: true
    text: |-
      MAIN_MENU_TITLE = "MAIN MENU"
      CRUD_MENU_TITLE = "CRUD MENU"
      TOP_TEN_MENU_TITLE = "TOP TEN MENU"
      
      MAIN_EXIT = 'EXIT'
      MAIN_CRUD = 'CRUD'
      MAIN_TOP_TEN = 'TOP_TEN'
      
      CRUD_BACK = 'BACK'
      CRUD_CREATE = 'CREATE'
      CRUD_READ = 'READ'
      CRUD_UPDATE = 'UPDATE'
      CRUD_DELETE = 'DELETE'
      CRUD_LIST_ALL = 'LIST_ALL'
      
      TOP_TEN_BACK = 'BACK'
      TOP_TEN_LIST_BY_EBITDA = 'LIST_BY_EBITDA'
      TOP_TEN_LIST_BY_ROE = 'LIST_BY_ROE'
      TOP_TEN_LIST_BY_ROA = 'LIST_BY_ROA'
      
      MAIN_OPTIONS = {
          MAIN_EXIT: ("0", "Exit"),
          MAIN_CRUD: ("1", "CRUD operations"),
          MAIN_TOP_TEN: ("2", "Show top ten companies by criteria"),
      }
      CRUD_OPTIONS = {
          CRUD_BACK: ("0", "Back"),
          CRUD_CREATE: ("1", "Create a company"),
          CRUD_READ: ("2", "Read a company"),
          CRUD_UPDATE: ("3", "Update a company"),
          CRUD_DELETE: ("4", "Delete a company"),
          CRUD_LIST_ALL: ("5", "List all companies")
      }
      
      TOP_TEN_OPTIONS = {
          TOP_TEN_BACK: ("0", "Back"),
          TOP_TEN_LIST_BY_EBITDA: ("1", "List by ND/EBITDA"),
          TOP_TEN_LIST_BY_ROE: ("2", "List by ROE"),
          TOP_TEN_LIST_BY_ROA: ("3", "List by ROA")
      }
      
      MAIN_MENU = (MAIN_MENU_TITLE, MAIN_OPTIONS)
      CRUD_MENU = (CRUD_MENU_TITLE, CRUD_OPTIONS)
      TOP_TEN_MENU = (TOP_TEN_MENU_TITLE, TOP_TEN_OPTIONS)
    learner_created: true
  - name: financial.csv
    visible: true
    text: |-
      ticker,ebitda,sales,net_profit,market_price,net_debt,assets,equity,cash_equivalents,liabilities
      AAPL,130795000000,365817000000,94680000000,2279000000000,68470000000,350662000000,67405056180,51511000000,283256943820
      MSFT,95769000000,168088000000,61271000000,1900000000000,-26712000000,344607000000,162460416667,104693000000,182146583333
      GOOG,95305000000,257488000000,76033000000,1479000000000,-105368000000,357096000000,260018181818,133970000000,97077818182
      AMZN,55722000000,469822000000,33364000000,1090000000000,62856000000,410767000000,133453608247,66594000000,277313391753
      FB,52050000000,117929000000,39370000000,520301000000,-29526000000,164218000000,122150000000,44184000000,42068000000
      JNJ,31662000000,93758000000,20878000000,461811000000,2760000000,178355000000,75336363636,30388000000,103018636364
      UNH,,287597000000,17285000000,442235000000,22011000000,221238000000,77857377049,25482000000,143380622951
      NVDA,11850000000,26914000000,9752000000,424130000000,-9521000000,44187000000,26561363636,21208000000,17625636364
      V,18960000000,24105000000,12008000000,416410000000,5590000000,81808000000,36253448276,15437000000,45554551724
      XOM,57778000000,280510000000,23040000000,381867000000,36463000000,354771000000,176062962963,11074000000,178708037037
      JPM,,126217000000,48103000000,352710000000,537411000000,3955000000000,286558454106,55765000000,3668441545894
      PG,21039000000,76118000000,14306000000,347994000000,25143000000,120217000000,45498648649,8526000000,74718351351
      WMT,38200000000,572754000000,13673000000,337023000000,42563000000,244860000000,92456451613,14760000000,152403548387
      CVX,40193000000,156291000000,15625000000,330207000000,17312000000,249048000000,146665000000,12021000000,102383000000
      MA,11689000000,18883000000,8687000000,326804000000,6733000000,37163000000,7144390244,7913000000,30018609756
      HD,25902000000,151157000000,16433000000,294695000000,43926000000,71876000000,-1696077713,2343000000,73572077713
      PFE,31545000000,,22147000000,284648000000,12404000000,183841000000,82502272727,23897000000,101338727273
      BAC,,95762000000,31978000000,281024000000,488415000000,3238000000000,267105154639,29769000000,2970894845361
      LLY,10085000000,28318000000,5582000000,280478000000,13941000000,46919000000,9487931034,2568000000,37431068966
      ABBV,28724000000,56197000000,11468000000,269361000000,65902000000,143211000000,16327555556,7572000000,126883444444
      KO,13704000000,38726000000,9771000000,265304000000,31345000000,94064000000,26903870968,10356000000,67160129032
      AVGO,15703000000,27450000000,6736000000,232953000000,29286000000,73224000000,22968023256,10219000000,50255976744
      MRK,20014000000,48907000000,13049000000,232903000000,22808000000,106668000000,40761538462,8986000000,65906461538
      PEP,13841000000,79468000000,7618000000,226276000000,33145000000,92962000000,18287214612,6904000000,74674785388
      TMO,12950000000,39211000000,7725000000,212239000000,30477000000,92747000000,41055555556,2778000000,51691444444
      VZ,49551000000,133613000000,22065000000,205321000000,177070000000,365716000000,84981603774,3091000000,280734396226
      CSCO,16063000000,49818000000,10591000000,200896000000,-8514000000,94262000000,39406250000,21124000000,54855750000
      ABT,13379000000,43075000000,7042000000,197401000000,8932000000,74007000000,35604166667,8158000000,38402833333
      COST,9681000000,195929000000,5007000000,190321000000,-3050000000,63078000000,20100000000,12296000000,42978000000
      DIS,11991000000,67387000000,1995000000,189892000000,38748000000,202453000000,104046000000,13275000000,98407000000
      CMCSA,35337000000,116385000000,14159000000,188743000000,90830000000,274074000000,96826213592,8901000000,177247786408
      ADBE,6765000000,15801000000,4822000000,187998000000,-36000000,25976000000,13720588235,4701000000,12255411765
      ORCL,18920000000,40479000000,13746000000,182235000000,55024000000,108644000000,-8210785340,23389000000,116854785340
      DHR,10446000000,29453000000,6433000000,177116000000,18061000000,83392000000,46336170213,3717000000,37055829787
      ACN,10686000000,50533000000,5907000000,173653000000,-1919000000,44318000000,20900000000,5472000000,23418000000
      INTC,31547000000,79024000000,19868000000,173169000000,-1449000000,176356000000,103463888889,38696000000,72892111111
      NKE,8117000000,44493000000,5727000000,172122000000,-810000000,38577000000,14890588235,13467000000,23686411765
      MCD,11980000000,23223000000,7545000000,170886000000,45217000000,50878000000,-5989042821,2336000000,56867042821
      PM,13825000000,31346000000,9083000000,164588000000,24731000000,41733000000,-8200279330,4626000000,49933279330
      BMY,18904000000,46385000000,6994000000,163981000000,30644000000,103034000000,31720689655,15351000000,71313310345
      WFC,,85424000000,21548000000,159612000000,163899000000,1940000000000,182240952381,27454000000,1757759047619
      TXN,10726000000,18344000000,7736000000,157039000000,-2083000000,25276000000,14076363636,9825000000,11199636364
      TMUS,26343000000,80118000000,3024000000,156999000000,110269000000,210653000000,70070370370,3245000000,140582629630
      CRM,5194000000,26492000000,1444000000,156373000000,3829000000,99178000000,57464000000,10537000000,41714000000
      LIN,10127000000,30793000000,3826000000,156053000000,11992000000,82767000000,44475675676,4464000000,38291324324
      AMD,4857000000,16434000000,3162000000,156023000000,-4375000000,66915000000,53925000000,6532000000,12990000000
      UPS,16499000000,97204000000,12890000000,150604000000,12885000000,70113000000,15412121212,12545000000,54700878788
      QCOM,14484000000,33566000000,9043000000,146104000000,4134000000,44302000000,13288135593,11546000000,31013864407
      T,49376000000,168864000000,20081000000,144827000000,194588000000,577195000000,186572800000,38628000000,390622200000
      MS,,61352000000,15034000000,141692000000,303829000000,1222000000000,103958471761,9086000000,1118041528239
      UNP,11936000000,21804000000,6523000000,141299000000,32863000000,64051000000,11913732394,972000000,52137267606
      NEE,13266000000,21267000000,3573000000,139479000000,58172000000,144945000000,44217037037,1521000000,100727962963
      MDT,9791000000,30117000000,3606000000,138943000000,13934000000,91804000000,52406250000,11221000000,39397750000
      RTX,9250000000,64360000000,3864000000,137731000000,27059000000,159366000000,73553333333,6040000000,85812666667
      COP,24532000000,46056000000,8079000000,135140000000,11602000000,93308000000,49331578947,7144000000,43976421053
      HON,7973000000,34387000000,5542000000,131974000000,10644000000,63352000000,19082242991,9774000000,44269757009
      AMGN,12893000000,25987000000,5893000000,130323000000,30310000000,59196000000,916082525,6544000000,58279917475
      BX,13445000000,12591000000,5857000000,123778000000,6022000000,43344000000,22224444444,3979000000,21119555556
      CVS,19339000000,291935000000,7910000000,123289000000,61660000000,232873000000,74426470588,14255000000,158446529412
      LOW,14492000000,96250000000,8409000000,121527000000,27980000000,46330000000,-4817049180,1404000000,51147049180
      SCHW,9197000000,18996000000,5855000000,119982000000,-105453000000,680950000000,48346296296,131560000000,632603703704
      IBM,14544000000,57351000000,5743000000,119571000000,46777000000,133275000000,19118604651,10770000000,114156395349
      AXP,12097000000,43663000000,8004000000,117553000000,12781000000,195862000000,22353038674,27678000000,173508961326
      LMT,10141000000,67044000000,6315000000,115578000000,9762000000,51510000000,10038793103,1883000000,41471206897
      ANTM,,138639000000,6104000000,114850000000,18029000000,100486000000,36104477612,6161000000,64381522388
      SPGI,3984000000,8297000000,3024000000,114585000000,7811000000,66092000000,43635714286,4407000000,22456285714
      DE,10188000000,43970000000,5963000000,113102000000,42370000000,79614000000,17819101124,5207000000,61794898876
      CAT,9288000000,50984000000,6489000000,110910000000,31058000000,82276000000,17083636364,6526000000,65192363636
      GS,,64321000000,21635000000,105345000000,536965000000,1589000000000,116084042553,8630000000,1472915957447
      INTU,3248000000,9633000000,2062000000,99920000000,5823000000,26303000000,15732608696,1414000000,10570391304
      AMAT,8126000000,23059000000,5888000000,98357000000,20000000,25428000000,11993750000,5737000000,13434250000
      MO,16426000000,21111000000,2464000000,96322000000,22569000000,40235000000,-1760529634,5353000000,41995529634
      C,,80171000000,21798000000,95776000000,463924000000,2394000000000,198262903226,27768000000,2195737096774
      BLK,8907000000,20186000000,5901000000,89669000000,2010000000,143327000000,38633333333,7262000000,104693666667
      PYPL,5348000000,25561000000,4169000000,89378000000,1063000000,75805000000,20518181818,7965000000,55286818182
      CB,,40955000000,8539000000,87840000000,16329000000,176953000000,57009375000,1914000000,119943625000
      SYK,4556000000,17108000000,1994000000,87811000000,13068000000,36137000000,15049484536,1530000000,21087515464
      ADP,4177000000,15005000000,2599000000,87100000000,1777000000,72068000000,4193902439,1662000000,67874097561
      MMM,9077000000,35355000000,5921000000,84750000000,14188000000,45855000000,14997435897,3359000000,30857564103
      MDLZ,5513000000,28720000000,4300000000,84336000000,18259000000,67994000000,28072222222,1953000000,39921777778
      DUK,10842000000,25097000000,3908000000,83842000000,69406000000,171220000000,51394160584,1004000000,119825839416
      ADI,3312000000,7318000000,1390000000,83689000000,4463000000,51216000000,36788235294,1791000000,14427764706
      BKNG,3751000000,10958000000,1165000000,83293000000,-481000000,22384000000,4379653680,10598000000,18004346320
      GE,7731000000,74174000000,,82770000000,12692000000,191961000000,40347777778,23621000000,151613222222
      NOW,860000000,5896000000,230000000,82640000000,-1814000000,10993000000,4012727273,4021000000,6980272727
      EL,4422000000,16251000000,2870000000,81879000000,3957000000,21359000000,7020720721,3836000000,14338279279
      SBUX,7661000000,29059000000,4199000000,81751000000,20922000000,29022000000,-8773943662,3996000000,37795943662
      CI,,174274000000,5365000000,81720000000,29323000000,147673000000,46228767123,4424000000,101444232877
      MU,16975000000,27705000000,5861000000,79339000000,-2453000000,63696000000,47931250000,10122000000,15764750000
      GILD,12697000000,27372000000,6225000000,79298000000,20883000000,63080000000,19854545455,5325000000,43225454545
      CHTR,20455000000,51682000000,4654000000,78809000000,93066000000,143948000000,15942737896,2431000000,128005262104
      NFLX,19131000000,29698000000,5116000000,78721000000,11291000000,45331000000,17474747475,6009000000,27856252525
      SO,9019000000,23230000000,2408000000,78436000000,54260000000,128639000000,32895294118,1662000000,95743705882
      ISRG,2140000000,5710000000,1705000000,77301000000,-3986000000,13678000000,,3986000000,
      MMC,5955000000,19802000000,3143000000,76517000000,13133000000,33688000000,11124000000,772000000,22564000000
      TGT,11890000000,106005000000,6946000000,74934000000,10556000000,53811000000,12864843750,5911000000,40946156250
      ZTS,3290000000,7776000000,2037000000,74764000000,3601000000,13860000000,4645517241,3135000000,9214482759
      BA,1124000000,62286000000,,74262000000,,,,,
    learner_created: true
  - name: repository.py
    visible: true
    text: |+
      from models import Company, Financial
      
      
      class Repository:
          def __init__(self, database):
              self.db = database
      
          def initialize_database(self):
              self.db.init_db()
      
          def load_data(self, companies, financials):
              with self.db.Session() as session:
                  for company in companies:
                      registry = Company(**company)
                      session.add(registry)
      
                  for financial in financials:
                      registry = Financial(**financial)
                      session.add(registry)
                  session.commit()
      
          def add_new_company(self, company, financial):
              with self.db.Session() as session:
                  registry = Company(**company)
                  session.add(registry)
      
                  registry = Financial(**financial)
                  session.add(registry)
                  session.commit()
      
          def find_companies_by_name(self, company_name):
              with self.db.Session() as session:
                  query = session.query(Company)
                  query_result = query.filter(Company.name.like('%' + company_name + '%')).all()
      
              return query_result
      
          def list_all_companies(self):
              with self.db.Session() as session:
                  companies = session.query(Company).order_by(Company.ticker).all()
      
              return companies
      
          def find_financial_info_by_ticker(self, ticker):
              with self.db.Session() as session:
                  query = session.query(Financial)
                  query_result = query.filter(Financial.ticker == ticker).first()
      
              return query_result
      
          def update_financial_info(self, financial_info):
              with self.db.Session() as session:
                  query = session.query(Financial)
                  query_filter = query.filter(Financial.ticker == financial_info["ticker"])
                  query_filter.update(financial_info)
                  session.commit()
      
          def delete_company_by_ticker(self, ticker):
              with self.db.Session() as session:
                  query = session.query(Financial)
                  query_filter = query.filter(Financial.ticker == ticker)
                  query_filter.delete()
                  query = session.query(Company)
                  query_filter = query.filter(Company.ticker == ticker)
                  query_filter.delete()
                  session.commit()
    
    
    
    
    learner_created: true
  - name: database.py
    visible: true
    text: |
      from sqlalchemy import create_engine
      from sqlalchemy.orm import sessionmaker
      from base import Base
      
      
      class Database:
          def __init__(self, db_url='sqlite:///investor.db', echo=False):
              self.engine = create_engine(db_url, echo=echo)
              self.Session = sessionmaker(bind=self.engine)
      
          def init_db(self):
              Base.metadata.drop_all(bind=self.engine)
              Base.metadata.create_all(self.engine)
    learner_created: true
  - name: companies.csv
    visible: true
    text: |-
      ticker,name,sector
      AAPL,Apple Inc,Electronic Technology
      MSFT,Microsoft Corp.,Technology Services
      GOOG,Alphabet Inc (Google) Class C,Technology Services
      AMZN,"Amazon.com, Inc.",Retail Trade
      FB,"Meta Platforms, Inc.",Technology Services
      JNJ,Johnson & Johnson,Health Technology
      UNH,UnitedHealth Group Incorporated,Health Services
      NVDA,NVIDIA Corporation,Electronic Technology
      V,Visa Inc.,Finance
      XOM,Exxon Mobil Corporation,Energy Minerals
      JPM,JP Morgan Chase & Co.,Finance
      PG,Procter & Gamble Company (The),Consumer Non-Durables
      WMT,Walmart Inc.,Retail Trade
      CVX,Chevron Corporation,Energy Minerals
      MA,Mastercard Incorporated,Commercial Services
      HD,"Home Depot, Inc. (The)",Retail Trade
      PFE,"Pfizer, Inc.",Health Technology
      BAC,Bank of America Corporation,Finance
      LLY,Eli Lilly and Company,Health Technology
      ABBV,AbbVie Inc.,Health Technology
      KO,Coca-Cola Company (The),Consumer Non-Durables
      AVGO,Broadcom Inc.,Electronic Technology
      MRK,"Merck & Company, Inc.",Health Technology
      PEP,"PepsiCo, Inc.",Consumer Non-Durables
      TMO,Thermo Fisher Scientific Inc,Health Technology
      VZ,Verizon Communications Inc.,Communications
      CSCO,"Cisco Systems, Inc.",Technology Services
      ABT,Abbott Laboratories,Health Technology
      COST,Costco Wholesale Corporation,Retail Trade
      DIS,Walt Disney Company (The),Consumer Services
      CMCSA,Comcast Corporation,Consumer Services
      ADBE,Adobe Inc.,Technology Services
      ORCL,Oracle Corporation,Technology Services
      DHR,Danaher Corporation,Health Technology
      ACN,Accenture plc,Technology Services
      INTC,Intel Corporation,Electronic Technology
      NKE,"Nike, Inc.",Consumer Non-Durables
      MCD,McDonalds Corporation,Consumer Services
      PM,Philip Morris International Inc,Consumer Non-Durables
      BMY,Bristol-Myers Squibb Company,Health Technology
      WFC,Wells Fargo & Company,Finance
      TXN,Texas Instruments Incorporated,Electronic Technology
      TMUS,"T-Mobile US, Inc.",Communications
      CRM,"Salesforce, Inc.",Technology Services
      LIN,Linde plc,Process Industries
      AMD,Advanced Micro Devices Inc,Electronic Technology
      UPS,"United Parcel Service, Inc.",Transportation
      QCOM,QUALCOMM Incorporated,Electronic Technology
      T,AT&T Inc.,Communications
      MS,Morgan Stanley,Finance
      UNP,Union Pacific Corporation,Transportation
      NEE,"NextEra Energy, Inc.",Utilities
      MDT,Medtronic plc.,Health Technology
      RTX,Raytheon Technologies Corporation,Electronic Technology
      COP,ConocoPhillips,Energy Minerals
      HON,Honeywell International Inc.,Producer Manufacturing
      AMGN,Amgen Inc.,Health Technology
      BX,Blackstone Inc.,Finance
      CVS,CVS Health Corporation,Retail Trade
      LOW,"Lowes Companies, Inc.",Retail Trade
      SCHW,Charles Schwab Corporation (The),Finance
      IBM,International Business Machines Corporation,Technology Services
      AXP,American Express Company,Finance
      LMT,Lockheed Martin Corporation,Electronic Technology
      ANTM,"Anthem, Inc.",Health Services
      SPGI,S&P Global Inc.,Commercial Services
      DE,Deere & Company,Producer Manufacturing
      CAT,"Caterpillar, Inc.",Producer Manufacturing
      GS,"Goldman Sachs Group, Inc. (The)",Finance
      INTU,Intuit Inc.,Technology Services
      AMAT,"Applied Materials, Inc.",Producer Manufacturing
      MO,"Altria Group, Inc.",Consumer Non-Durables
      C,"Citigroup, Inc.",Finance
      BLK,"BlackRock, Inc.",Finance
      PYPL,"PayPal Holdings, Inc.",Commercial Services
      CB,Chubb Limited,Finance
      SYK,Stryker Corporation,Health Technology
      ADP,"Automatic Data Processing, Inc.",Technology Services
      MMM,3M Company,Producer Manufacturing
      MDLZ,"Mondelez International, Inc.",Consumer Non-Durables
      DUK,Duke Energy Corporation (Holding Company),Utilities
      ADI,"Analog Devices, Inc.",Electronic Technology
      BKNG,Booking Holdings Inc. Common Stock,Consumer Services
      GE,General Electric Company,Producer Manufacturing
      NOW,"ServiceNow, Inc.",Technology Services
      EL,"Estee Lauder Companies, Inc. (The)",Consumer Non-Durables
      SBUX,Starbucks Corporation,Consumer Services
      CI,Cigna Corporation,Health Services
      MU,"Micron Technology, Inc.",Electronic Technology
      GILD,"Gilead Sciences, Inc.",Health Technology
      CHTR,"Charter Communications, Inc.",Consumer Services
      NFLX,"Netflix, Inc.",Technology Services
      SO,Southern Company (The),Utilities
      ISRG,"Intuitive Surgical, Inc.",Health Technology
      MMC,"Marsh & McLennan Companies, Inc.",Finance
      TGT,Target Corporation,Retail Trade
      ZTS,Zoetis Inc.,Health Technology
      BA,Boeing Company (The),Electronic Technology
    learner_created: true
  - name: models.py
    visible: true
    text: |-
      from sqlalchemy.orm import declarative_base
      from sqlalchemy import Column, Float, String
      from sqlalchemy.orm import validates
      from base import Base
      
      
      class Company(Base):
          __tablename__ = 'companies'
      
          ticker = Column(String, primary_key=True)
          name = Column(String, default=None)
          sector = Column(String, default=None)
      
      class Financial(Base):
          __tablename__ = 'financial'
      
          ticker = Column(String, primary_key=True)
          ebitda = Column(Float, default=None)
          sales = Column(Float, default=None)
          net_profit = Column(Float, default=None)
          market_price = Column(Float, default=None)
          net_debt = Column(Float, default=None)
          assets = Column(Float, default=None)
          equity = Column(Float, default=None)
          cash_equivalents = Column(Float, default=None)
          liabilities = Column(Float, default=None)
      
          def get_indicators(self):
              if self is None:
                  return []
              indicators = [('P/E', Financial._indicator(self.market_price, self.net_profit)),
                            ('P/S', Financial._indicator(self.market_price, self.sales)),
                            ('P/B', Financial._indicator(self.market_price, self.assets)),
                            ('ND/EBITDA', Financial._indicator(self.net_debt, self.ebitda)),
                            ('ROE', Financial._indicator(self.net_profit, self.equity)),
                            ('ROA', Financial._indicator(self.net_profit, self.assets)),
                            ('L/A', Financial._indicator(self.liabilities, self.assets))]
              return indicators
      
          @staticmethod
          def _indicator(num, den):
              if (num is None
                      or den is None
                      or den == 0):
                  return None
              else:
                  return round(num / den, 2)
      
      
          @validates('ebitda', 'sales', 'net_profit', 'market_price',
                     'net_debt', 'assets', 'equity', 'cash_equivalents',
                     'liabilities')
          def validate_floats(self, key, value):
              try:
                  return float(value) if value != '' else None
              except ValueError:
                  return None
    learner_created: true
  - name: base.py
    visible: true
    text: |
      #from sqlalchemy.ext.declarative import declarative_base
      from sqlalchemy.orm import declarative_base
      
      Base = declarative_base()
    learner_created: true
  - name: manager.py
    visible: true
    text: |
      import csv
      from database import Database
      from models import Company, Financial
      from repository import Repository
      
      
      class Manager:
      
          def __init__(self):
              self.repository = Repository(Database())
      
          def initialize_database(self):
              try:
                  self.repository.initialize_database()
                  self.repository.load_data(
                          Manager._read_csv_companies(),
                          Manager._read_csv_financial())
              except Exception as e:
                  raise
      
          def create_company(self, company, financial):
              self.repository.add_new_company(company, financial)
      
          def find_companies_by_name(self, company_name):
              found_companies = self.repository.find_companies_by_name(company_name)
              companies_list = [(company.ticker, company.name) for company in found_companies]
              return companies_list
      
          def get_financial_indicators_by_ticker(self, ticker):
              financial = self.find_company_financial_by_ticker(ticker)
              if financial is None:
                  return None
              else:
                  return Manager.get_financial_indicators(financial)
      
          @staticmethod
          def get_financial_indicators(financial):
              if financial is None:
                  return []
              return financial.get_indicators()
      
          def find_company_financial_by_ticker(self, ticker):
              financial_info = self.repository.find_financial_info_by_ticker(ticker)
              return financial_info
      
          def update_financial_info_by_ticker(self, financial_info):
              self.repository.update_financial_info(financial_info)
      
          def delete_company_by_ticker(self, ticker):
              self.repository.delete_company_by_ticker(ticker)
      
          def list_all_companies(self):
              all_companies = self.repository.list_all_companies()
              companies_list = [(company.ticker, company.name, company.sector) for company in all_companies]
              return companies_list
      
          @staticmethod
          def _read_csv_companies():
              with open('companies.csv', 'r') as csvfile:
                  csv_reader = csv.DictReader(csvfile)
                  companies = list(csv_reader)
      
              return companies
      
          @staticmethod
          def _read_csv_financial():
              with open('financial.csv', 'r') as csvfile:
                  csv_reader = csv.DictReader(csvfile)
                  financials = list(csv_reader)
      
              return financials
    learner_created: true
  - name: Buildings_Database.sqlite
    visible: true
    text: 
    learner_created: true
  - name: __init__.py
    visible: true
    learner_created: true
  - name: investor.db
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/20549#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 07 Nov 2023 22:18:31 UTC"
record: -1
